# Generated by Django 4.1.13 on 2025-04-07 15:02

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0014_configuration'),
    ]

    operations = [
        migrations.CreateModel(
            name='NABatRecording',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('recording_id', models.BigIntegerField(unique=True)),
                ('survey_event_id', models.BigIntegerField()),
                ('acoustic_batch_id', models.BigIntegerField(blank=True, null=True)),
                ('equipment', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                (
                    'recording_location',
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ('grts_cell_id', models.IntegerField(blank=True, null=True)),
                ('grts_cell', models.IntegerField(blank=True, null=True)),
                ('public', models.BooleanField(default=False)),
                ('software_name', models.TextField(blank=True, null=True)),
                ('software_developer', models.TextField(blank=True, null=True)),
                ('software_version', models.TextField(blank=True, null=True)),
                ('detector', models.TextField(blank=True, null=True)),
                ('species_list', models.TextField(blank=True, null=True)),
                ('unusual_occurrences', models.TextField(blank=True, null=True)),
                (
                    'computed_species',
                    models.ManyToManyField(
                        related_name='nabatrecording_computed_species', to='core.species'
                    ),
                ),
                (
                    'nabat_auto_species',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='nabatrecording_auto_species',
                        to='core.species',
                    ),
                ),
                (
                    'nabat_manual_species',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='nabatrecording_manual_species',
                        to='core.species',
                    ),
                ),
                (
                    'official_species',
                    models.ManyToManyField(
                        related_name='nabatrecording_official_species', to='core.species'
                    ),
                ),
            ],
            options={
                'verbose_name': 'NABat Recording',
                'verbose_name_plural': 'NABat Recording',
            },
        ),
        migrations.CreateModel(
            name='ProcessingTask',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('metadata', models.JSONField(blank=True, null=True)),
                (
                    'status',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('Complete', 'Complete'),
                            ('Running', 'Running'),
                            ('Error', 'Error'),
                            ('Queued', 'Queued'),
                        ],
                        help_text='Processing Status',
                        max_length=255,
                    ),
                ),
                (
                    'celery_id',
                    models.CharField(
                        blank=True, help_text='Celery Task Id', max_length=255, unique=True
                    ),
                ),
                ('output_metadata', models.JSONField(blank=True, null=True)),
                ('error', models.TextField(blank=True, help_text='Error text if an error occurs')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NABatSpectrogram',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('image_file', models.FileField(upload_to='')),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('frequency_min', models.IntegerField()),
                ('frequency_max', models.IntegerField()),
                ('colormap', models.CharField(max_length=20, null=True)),
                (
                    'nabat_recording',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='core.nabatrecording'
                    ),
                ),
            ],
            options={
                'verbose_name': 'NABat Spectrogram',
                'verbose_name_plural': 'NABat Spectrograms',
            },
        ),
        migrations.CreateModel(
            name='NABatRecordingAnnotation',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('comments', models.TextField(blank=True, null=True)),
                (
                    'user_id',
                    models.UUIDField(
                        blank=True,
                        help_text='User ID of the person who created the annotation',
                        null=True,
                    ),
                ),
                (
                    'user_email',
                    models.TextField(
                        blank=True,
                        help_text='User ID of the person who created the annotation',
                        null=True,
                    ),
                ),
                ('model', models.TextField(blank=True, null=True)),
                (
                    'confidence',
                    models.FloatField(
                        default=1.0,
                        help_text='A confidence value between 0 and 1.0, default is 1.0.',
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    'additional_data',
                    models.JSONField(
                        blank=True,
                        help_text='Additional information about the models/data',
                        null=True,
                    ),
                ),
                (
                    'nabat_recording',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='core.nabatrecording'
                    ),
                ),
                ('species', models.ManyToManyField(to='core.species')),
            ],
            options={
                'verbose_name': 'NABat Recording Annotation',
                'verbose_name_plural': 'NABat Recording Annotations',
            },
        ),
        migrations.CreateModel(
            name='NABatCompressedSpectrogram',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                ('image_file', models.FileField(upload_to='')),
                ('length', models.IntegerField()),
                (
                    'starts',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.IntegerField(), size=None
                        ),
                        size=None,
                    ),
                ),
                (
                    'stops',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.IntegerField(), size=None
                        ),
                        size=None,
                    ),
                ),
                (
                    'widths',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.IntegerField(), size=None
                        ),
                        size=None,
                    ),
                ),
                ('cache_invalidated', models.BooleanField(default=True)),
                (
                    'nabat_recording',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='core.nabatrecording'
                    ),
                ),
                (
                    'spectrogram',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='core.nabatspectrogram'
                    ),
                ),
            ],
            options={
                'verbose_name': 'NABat Compressed Spectrogram',
                'verbose_name_plural': 'NABat Compressed Spectrogram',
            },
        ),
    ]
