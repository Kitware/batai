name: CI
on:
  pull_request:
    # types: [opened, synchronize]
    # TODO: why is this here?
  push:
    branches:
      - "main"
permissions:
  contents: read
jobs:
  lint-node:
    strategy:
      fail-fast: false
      matrix:
        linter: [eslint, typescript]
    name: Lint [${{ matrix.linter }}]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node environment
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: client/package-lock.json
      - name: Install packages
        run: npm ci
        working-directory: client
      - name: Run ${{ matrix.linter }}
        run: npm run lint:${{ matrix.linter }}
        working-directory: client
  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_DB: django
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready --username postgres"
          --health-start-period 30s
          --health-start-interval 2s
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:management-alpine
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-start-period 30s
          --health-start-interval 2s
        ports:
          - 5672:5672
      minio:
        # This image does not require any command arguments (which GitHub Actions don't support)
        image: bitnami/minio:2025.4.22
        env:
          MINIO_ROOT_USER: minioAccessKey
          MINIO_ROOT_PASSWORD: minioSecretKey
        options: >-
          --health-cmd "mc ready local"
          --health-timeout 1s
          --health-start-period 30s
          --health-start-interval 2s
        ports:
          - 9000:9000

    steps:
      # - name: Update Package References
      #   run: sudo apt-get update
      # - name: Install system dependencies
      #   run: >-
      #     sudo apt-get install --no-install-recommends --yes
      #       libgdal30
      #       libproj22
      # TODO: do we even need any system packages?

      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install pre-commit
        run: pip install pre-commit
        # TODO: install pre-commit via uv
      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-cache|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run pre-commit checks
        run: pre-commit run --all-files

      - name: Run tests
        run: uv run tox -e test
        # TODO: run the full tox testing suite. Fix linting/formatting and types so they pass
        env:
          DJANGO_DATABASE_URL: postgres://postgres:postgres@localhost:5432/django
          DJANGO_CELERY_BROKER_URL: amqp://localhost:5672/
          DJANGO_MINIO_STORAGE_URL: http://minioAccessKey:minioSecretKey@localhost:9000/django-storage-testing

  test-vue:
    name: Test [vue]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node environment
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: client/package-lock.json
      - name: Install packages
        run: npm ci
        working-directory: client
      - name: Run tests
        run: npm run test
        working-directory: client
